using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using ResultGenerator.Models;

namespace ResultGenerator;

[Generator(LanguageNames.CSharp)]
public sealed class SourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext ctx)
    {
        var types = ctx.SyntaxProvider
            .ForAttributeWithMetadataName(
                "ResultGenerator.ReturnsResultAttribute",
                (node, _) => node is MethodDeclarationSyntax,
                (syntaxCtx, _) =>
                    ResultType.Create(syntaxCtx))
            .Where(model => model is not null)
            .Select((model, _) => model!.Value);

        ctx.RegisterPostInitializationOutput(initCtx =>
        {
            initCtx.AddSource("uwu.g.cs", """
            /// <auto-generated/>

            using System;

            internal static partial class S
            {
                public static void Hello() => Console.WriteLine("uwu");
            }
            """);
        });

        ctx.RegisterSourceOutput(types, (sourceCtx, type) =>
        {
            sourceCtx.AddSource($"{type.Name}Result.g.cs", $$""""
            /// <auto-generated/>
            
            using System;

            internal static partial class S
            {
                public const string {{type.Name}} = """
                {{type}}
                """;
            }
            """");
        });
    }
}
