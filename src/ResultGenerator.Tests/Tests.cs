using Microsoft.CodeAnalysis.Testing;
using VerifyCS = ResultGenerator.Tests.Verifiers.CSharpIncrementalGeneratorVerifier<ResultGenerator.SourceGenerator>;

namespace ResultGenerator.Tests;

public class Tests
{
    private const string AttributeSource = """
    

    namespace ResultGenerator
    {
        [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)]
        public sealed class ReturnsResultAttribute : Attribute
        {
            public ReturnsResultAttribute() {}
            
            public ReturnsResultAttribute(string typeName) {}
        }
    }
    """;

    [Fact]
    public async Task GeneratesResultFromInferredName()
    {
        var code = """
        using System;
        using ResultGenerator;

        #pragma warning disable CS0658 // Disable invalid attribute target warnings.
        public sealed class PersonService
        {
            [ReturnsResult]
            [result: Ok, NotFound]
            public void GetPerson() =>
                throw new NotImplementedException();
        }
        """ + AttributeSource;

        var expected = """
        /// <auto-generated/>
        
        #nullable enable
        
        public readonly struct GetPersonResult
        {
            private readonly int _flag;

            // Variant Ok has no data.
            // Variant NotFound has no data.

            private GetPersonResult(int flag)
            {
                this._flag = flag;
            }

            public static GetPersonResult Ok() => new(1);
            public static GetPersonResult NotFound() => new(2);
        }
        """;

        await VerifyCS.VerifyGeneratorAsync(
            code,
            ("GetPersonResult.g.cs", expected));
    }

    [Fact]
    public async Task Test1()
    {
        var code = """
        using System;
        using ResultGenerator;

        #pragma warning disable CS0658 // Disable invalid attribute target warnings.
        public sealed class PersonService
        {
            [ReturnsResult("GetPersonResult")]
            [result: Ok(Value<Person>), NotFound]
            public void GetPersonByName(string name) =>
                throw new NotImplementedException();

            public record Person(string Name, int Age);
        }
        """ + AttributeSource;

        var expected = """
        /// <auto-generated/>
        
        #nullable enable
        
        public readonly struct GetPersonResult
        {
            private readonly int _flag;

            private readonly global::PersonService.Person _okData;
            // Variant NotFound has no data.

            private GetPersonResult(int flag, global::PersonService.Person ok = default)
            {
                this._flag = flag;
                this._okData = ok;
            }

            public static GetPersonResult Ok(global::PersonService.Person value) => new(1, ok: (value));
            public static GetPersonResult NotFound() => new(2);
        }
        """;

        await VerifyCS.VerifyGeneratorAsync(
            code,
            ("GetPersonResult.g.cs", expected));
    }
}
